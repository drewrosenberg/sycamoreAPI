//
//  SycamoreAPI.swift
//  SycamoreAPI
//
//  Created by Drew Rosenberg on 10/20/14.
//  Copyright (c) 2014 Drew Rosenberg. All rights reserved.
//

//import Foundation
import UIKit
import Foundation

//MARK: SycamoreDelegate protocol definition
protocol SycamoreDelegate{
    func sycamoreDataReceived(data: AnyObject?, dataTitle:  String)
    func tokenReceived()
}

class Sycamore : NSObject{
    
    //MARK: properties
    var delegate: SycamoreDelegate?
    var loggedIn : Bool{
        if self.authentication_token == nil{
            return false
        }else{
            return true
        }
    }

    //MARK: login/logout methods
    func request_token(){
        ///Request Token
        ///
        ///This function sends a token request to the sycamore website.  The response comes back through an NSNotification that is generated by the app delegate
        ///
        ///:param: none
        ///
        
        
        //request a token from the website
        let authenticateURL = NSURL(string:(AUTH_URL + "?response_type=token&client_id=\(CLIENT_ID)&scope=open general individual&redirect_uri=\(REDIRECT_URI)").stringByAddingPercentEscapesUsingEncoding(NSUTF8StringEncoding)!)
        
        UIApplication.sharedApplication().openURL(authenticateURL!)
        
        NSNotificationCenter.defaultCenter().addObserver(self, selector: "receive_token:", name: "token_received", object: nil)
        
    }
    func logout(){
        
        //removed saved token from user defaults
        let defaults = NSUserDefaults.standardUserDefaults()
        defaults.removeObjectForKey("authentication_token")
        defaults.synchronize()

        //clear token
        self.authentication_token = nil
    }
    func receive_token(notifaction: NSNotification){
        ///Receive Token
        ///
        ///This is called when the token is received from Sycamore.  It saves the received token to the instance and to user defaults
        ///
        ///:param: token this is the token that is sent from the website
        
        
        if let userInfo = notifaction.userInfo as? [String:String]{
            self.authentication_token = userInfo["access_token"]
            
            //save the token to user defaults for later
            self.putAuthenticationTokenIntoUserDefaults(self.authentication_token)
            
            self.delegate?.tokenReceived()
        }
        
    }
    
    //MARK: Sycamore REST API requests
    func getStudents(familyID: String){
        self.getRequest("Family/\(familyID)/Students")
    }
    func getGrades(studentID: String, quarter: Int = 0){
        switch quarter{
        case 0:
            self.getRequest("Student/\(studentID)/Grades")
        default:
            self.getRequest("Student/\(studentID)/Grades?quarter=\(quarter)")
        }

    
    }
    func getMe(){
        self.getRequest("Me")
    }
    
    
    //MARK:  Web communications
    func getRequest(getInfo: String){
        ///Get Request
        ///
        ///This function submits a get request to Sycamore's API URL using the API path items listed at http://api.sycamoresupport.com/introduction-to-the-api
        ///
        ///:params: none
        
        let requestURL = NSURL(string: API_URL + getInfo)
        
        println("Request: \(requestURL)")
        
        //generate request with token
        let request = NSMutableURLRequest(URL: requestURL!)
        
        if let unwrappedToken = self.authentication_token{
            request.setValue("Bearer " + authentication_token!, forHTTPHeaderField: "Authorization")
            
            let session = NSURLSession.sharedSession()
            
            session.dataTaskWithRequest(request, {(data, response, error) in
                var error: NSError?

                
                if error != nil{
                    println("ERROR: \(error)")
                }
                
                //TODO:  need to pass back nil if nothing comes back
                else{
                    let returnData:AnyObject?  = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: &error)
                    
                    println("\n\nJSon:\(returnData)")
                    
                    if let requestedItemName = requestURL?.lastPathComponent as String!{
                        self.dataReceived(returnData, dataRequested: requestedItemName)
                    }
                    
                }

                
            }).resume()
        }else{
            println("no token available")
        }
    }
    
    func dataReceived(data: AnyObject?, dataRequested: String){
        dispatch_async(dispatch_get_main_queue(), {
            if let thisDelegate = self.delegate{
                thisDelegate.sycamoreDataReceived(data, dataTitle: dataRequested)
            }            
        })
            
    }
    
    //MARK:  Token requests
    var authentication_token :String?
    
    //MARK:  User Defaults functions
    func pullAuthenticationTokenFromUserDefaults() -> String?{
        let defaults = NSUserDefaults.standardUserDefaults()
        
        self.authentication_token = defaults.objectForKey("authentication_token") as String? ?? nil
        return self.authentication_token
    }
    func putAuthenticationTokenIntoUserDefaults(token: String?){
        let defaults = NSUserDefaults.standardUserDefaults()
        defaults.setObject(self.authentication_token, forKey: "authentication_token")
        defaults.synchronize()
    }
    
    //MARK:  Initializers and deinitializers
    override init() {
        
        //call NSObject's initializer
        super.init()
        
        //check user defaults and load the authentication token if it is available
        self.pullAuthenticationTokenFromUserDefaults()
        
    }
    deinit{
        NSNotificationCenter.defaultCenter().removeObserver(self)
    }

}