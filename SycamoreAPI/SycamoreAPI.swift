//
//  SycamoreAPI.swift
//  SycamoreAPI
//
//  Created by Drew Rosenberg on 10/20/14.
//  Copyright (c) 2014 Drew Rosenberg. All rights reserved.
//

//import Foundation
import UIKit
import Foundation

protocol SycamoreDelegate{
    func sycamoreDataReceived(dataRequested:  String)
    func tokenReceived()
}

class Sycamore : NSObject{
    
    override init() {
        //initialize sycamoreData as an empty dictionary
        sycamoreData = Dictionary()
        
        //call NSObject's initializer
        super.init()

        //check user defaults and load the authentication token if it is available
        self.pullAuthenticationTokenFromUserDefaults()
        
    }

    var delegate: SycamoreDelegate?
    var sycamoreData: [String:AnyObject]

    //user credentials
    var authentication_token :String?
    
    
    func getStudents(){
        if let info = self.sycamoreData["Me"] as? [String:AnyObject]{
            if let familyID = info["FamilyID"] as? String{
                self.getRequest("Family/\(familyID)/Students")
            }
        }
    }
    
    func getMe(){
        self.getRequest("Me")
    }
    
    /******************************************************/
    //MARK:  Web communications
    /******************************************************/

    ///Get Request
    ///
    ///This function submits a get request to Sycamore's API URL using the API path items listed at http://api.sycamoresupport.com/introduction-to-the-api
    ///
    ///:params: none
    func getRequest(getInfo: String){
        
        let requestURL = NSURL(string: API_URL + getInfo)
        
        //generate request with token
        let request = NSMutableURLRequest(URL: requestURL!)
        
        if let unwrappedToken = self.authentication_token{
            request.setValue("Bearer " + authentication_token!, forHTTPHeaderField: "Authorization")
            
            let session = NSURLSession.sharedSession()
            
            session.dataTaskWithRequest(request, {(data, response, error) in
                var error: NSError?
                
                if let returnData: AnyObject = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: &error){
                    
                    println("\n\nJSon:\(returnData)")
                    
                    if let requestedItemName = requestURL?.lastPathComponent as String!{
                        self.dataReceived(returnData, dataRequested: requestedItemName)
                    }
                }

                
            }).resume()
        }else{
            println("no token available")
        }
    }
    
    func dataReceived(data: AnyObject?, dataRequested: String){
        
        self.sycamoreData[dataRequested] = data
        
        dispatch_async(dispatch_get_main_queue(), {self.delegate!.sycamoreDataReceived(dataRequested)})
    }
    
    /******************************************************/
    //MARK:  Token requests
    /******************************************************/

    ///游닌游닌游닌游닌Request Token游닌游닌游닌游닌
    ///
    ///This function sends a token request to the sycamore website.  The response comes back through an NSNotification that is generated by the app delegate
    ///
    ///:param: none
    ///
    func request_token(){
        //request a token from the website
        let authenticateURL = NSURL(string:(AUTH_URL + "?response_type=token&client_id=\(CLIENT_ID)&scope=open general individual&redirect_uri=\(REDIRECT_URI)").stringByAddingPercentEscapesUsingEncoding(NSUTF8StringEncoding)!)
        
        UIApplication.sharedApplication().openURL(authenticateURL!)
        
        NSNotificationCenter.defaultCenter().addObserver(self, selector: "receive_token:", name: "token_received", object: nil)
        
    }
    //游닌游닌游닌游닌游닌游닌游닌游닌游닌游닌游닌游닌游닌游닌游닌
    
    ///游닋游닋游닋游닋Receive Token游닋游닋游닋游닋
    ///
    ///This is called when the token is received from Sycamore.  It saves the received token to the instance and to user defaults
    ///
    ///:param: token this is the token that is sent from the website
    func receive_token(notifaction: NSNotification){

        if let userInfo = notifaction.userInfo as? Dictionary<String, String>{
            self.authentication_token = userInfo["access_token"]

            //save the token to user defaults for later
            self.putAuthenticationTokenIntoUserDefaults(self.authentication_token)
            
            self.delegate?.tokenReceived()
        }
        
    }
    //游닋游닋游닋游닋游닋游닋游닋游닋游닋游닋游닋游닋游닋游닋游닋
    
    
    /******************************************************/
    //MARK:  User Defaults functions
    /******************************************************/
    //TODO: Make private again
    func pullAuthenticationTokenFromUserDefaults() -> String?{
        let defaults = NSUserDefaults.standardUserDefaults()
        
        self.authentication_token = defaults.objectForKey("authentication_token") as String? ?? nil
        return self.authentication_token
    }
    
    func logout(){
        let defaults = NSUserDefaults.standardUserDefaults()

        //removed saved token
        defaults.removeObjectForKey("authentication_token")
        
        //clear the data
        self.sycamoreData = Dictionary()
    }
    
    private  func putAuthenticationTokenIntoUserDefaults(token: String?){
        let defaults = NSUserDefaults.standardUserDefaults()
        defaults.setObject(self.authentication_token, forKey: "authentication_token")
        defaults.synchronize()
    }
    
    /******************************************************/
    //MARK:  Cleanup
    /******************************************************/
    
    deinit{
        NSNotificationCenter.defaultCenter().removeObserver(self)
    }
}